import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as a,o as n}from"./app-CLMdb5Qr.js";const l={};function t(r,e){return n(),s("div",null,e[0]||(e[0]=[a(`<h1 id="vue自用组件传值方式" tabindex="-1"><a class="header-anchor" href="#vue自用组件传值方式"><span>VUE自用组件传值方式</span></a></h1><h3 id="store传值" tabindex="-1"><a class="header-anchor" href="#store传值"><span>store传值</span></a></h3><ul><li><code>store</code>是全局保存数据，一般保存一些cookie，权限，用户等信息。</li><li>需要进行注册<code>app.use(pinia)</code></li><li>这个是持久化插件，可以将数据持久保存在本地<code>pinia-plugin-persistedstate</code></li></ul><h3 id="父组件传子组件" tabindex="-1"><a class="header-anchor" href="#父组件传子组件"><span>父组件传子组件</span></a></h3><ul><li><p>暴露子组件函数，父组件调用</p><ul><li><p>子组件暴露函数</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const show = (item={})=&gt;{} //item是参数{}是类型</span></span>
<span class="line"><span>defineExpose({show})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>父组件调用</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>导入： import UserDialog from &#39;./userDialog.vue&#39;</span></span>
<span class="line"><span>注册：  components: {UserDialog}</span></span>
<span class="line"><span>使用： &lt;UserDialog @custClick=&quot;reGetTable&quot; ref=&quot;userDialog&quot;/&gt;--(html)</span></span>
<span class="line"><span>传值： this.$refs.userDialog.show(row)----(js)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>通过props传值</p><ul><li><p>父组件</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;UserDialog :myName=&quot;data&quot;/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>子组件</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>export default{props: {myName: {type:String,requires: true}}</span></span>
<span class="line"><span>键名，字符串类型，必填</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h3 id="子组件传父组件" tabindex="-1"><a class="header-anchor" href="#子组件传父组件"><span>子组件传父组件</span></a></h3><ul><li><p>通过emit传值，ts要导入</p><ul><li><p>子组件</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import {defineEmits} from &quot;vue&quot;;</span></span>
<span class="line"><span>const emit = defineEmits([&#39;custClick&#39;]);</span></span>
<span class="line"><span>emit(&#39;custClick&#39;, 1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>父组件</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;UserDialog @custClick=&quot;reGetTable&quot; ref=&quot;userDialog&quot;/&gt;</span></span>
<span class="line"><span>通过子组件绑定的字符串custClick找到父组件对应的函数reGetTable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h3 id="路由间传值" tabindex="-1"><a class="header-anchor" href="#路由间传值"><span>路由间传值</span></a></h3><ul><li>传值跳转后url保留参数<code>query</code><ul><li><code>$this.$router.push({ name: &#39;map-show&#39;, query: { search: &#39;aaa&#39; } })</code></li><li>跳转后获取参数<code>this.$route.query.search</code></li></ul></li><li>url不保留参数 <ul><li><code>this.$router.push({name: &#39;sign-off&#39;,params: { preData: row.id , flag: false}})</code></li></ul></li></ul>`,9)]))}const o=i(l,[["render",t]]),c=JSON.parse(`{"path":"/article/code/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC.html","title":"VUE自用组件传值方式","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-03-20T00:00:00.000Z","category":["技术"],"tag":["Vue","前端"],"description":"VUE自用组件传值方式 store传值 store是全局保存数据，一般保存一些cookie，权限，用户等信息。 需要进行注册app.use(pinia) 这个是持久化插件，可以将数据持久保存在本地pinia-plugin-persistedstate 父组件传子组件 暴露子组件函数，父组件调用 子组件暴露函数 父组件调用 通过props传值 父组件 子...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/article/code/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"VUE自用组件传值方式"}],["meta",{"property":"og:description","content":"VUE自用组件传值方式 store传值 store是全局保存数据，一般保存一些cookie，权限，用户等信息。 需要进行注册app.use(pinia) 这个是持久化插件，可以将数据持久保存在本地pinia-plugin-persistedstate 父组件传子组件 暴露子组件函数，父组件调用 子组件暴露函数 父组件调用 通过props传值 父组件 子..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-20T05:57:35.000Z"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:published_time","content":"2025-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-20T05:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VUE自用组件传值方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-20T05:57:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chione\\",\\"url\\":\\"https://chione.github.io\\"}]}"]]},"git":{"createdTime":1742450255000,"updatedTime":1742450255000,"contributors":[{"name":"wen.tian","username":"wen.tian","email":"tw958658@163.com","commits":1,"url":"https://github.com/wen.tian"}]},"readingTime":{"minutes":0.97,"words":291},"filePathRelative":"article/code/vue组件传值.md","localizedDate":"2025年3月20日","excerpt":"\\n<h3>store传值</h3>\\n<ul>\\n<li><code>store</code>是全局保存数据，一般保存一些cookie，权限，用户等信息。</li>\\n<li>需要进行注册<code>app.use(pinia)</code></li>\\n<li>这个是持久化插件，可以将数据持久保存在本地<code>pinia-plugin-persistedstate</code></li>\\n</ul>\\n<h3>父组件传子组件</h3>\\n<ul>\\n<li>\\n<p>暴露子组件函数，父组件调用</p>\\n<ul>\\n<li>\\n<p>子组件暴露函数</p>\\n<ul>\\n<li>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>const show = (item={})=&gt;{} //item是参数{}是类型</span></span>\\n<span class=\\"line\\"><span>defineExpose({show})</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>父组件调用</p>\\n<ul>\\n<li>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>导入： import UserDialog from './userDialog.vue'</span></span>\\n<span class=\\"line\\"><span>注册：  components: {UserDialog}</span></span>\\n<span class=\\"line\\"><span>使用： &lt;UserDialog @custClick=\\"reGetTable\\" ref=\\"userDialog\\"/&gt;--(html)</span></span>\\n<span class=\\"line\\"><span>传值： this.$refs.userDialog.show(row)----(js)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>通过props传值</p>\\n<ul>\\n<li>\\n<p>父组件</p>\\n<ul>\\n<li>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>&lt;UserDialog :myName=\\"data\\"/&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>子组件</p>\\n<ul>\\n<li>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>export default{props: {myName: {type:String,requires: true}}</span></span>\\n<span class=\\"line\\"><span>键名，字符串类型，必填</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{o as comp,c as data};
