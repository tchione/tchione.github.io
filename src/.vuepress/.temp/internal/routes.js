export const redirects = JSON.parse("{\"/article/code/(%E8%BD%AC)Docker%E5%AE%8C%E7%BE%8E%E9%83%A8%E7%BD%B2Django%20Uwsgi+Nginx+MySQL+Redis.html\":\"/article/code/(%E8%BD%AC)Docker%E5%AE%8C%E7%BE%8E%E9%83%A8%E7%BD%B2Django%20Uwsgi_Nginx_MySQL_Redis.html\"}")

export const routes = Object.fromEntries([
  ["/intro.html", { loader: () => import(/* webpackChunkName: "intro.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/intro.html.js"), meta: {"cover":"/assets/images/cover3.jpg","excerpt":"\n<p>将你的个人介绍和档案放置在此处。</p>\n","readingTime":{"minutes":0.08,"words":23},"title":"介绍页","icon":"circle-info","type":"article"} }],
  ["/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/index.html.js"), meta: {"title":"博客主页","icon":"house"} }],
  ["/article/code/(%E8%BD%AC)Docker%E5%AE%8C%E7%BE%8E%E9%83%A8%E7%BD%B2Django%20Uwsgi_Nginx_MySQL_Redis.html", { loader: () => import(/* webpackChunkName: "article_code_(转)Docker完美部署Django Uwsgi_Nginx_MySQL_Redis.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/(转)Docker完美部署Django Uwsgi_Nginx_MySQL_Redis.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["转载","Python","后端","Django"],"excerpt":"\n<p><strong>PS原地址:<a href=\"https://zhuanlan.zhihu.com/p/145364353\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/145364353</a></strong></p>\n<h3>什么是docker-compose及docker-compose工具的安装</h3>\n<ul>\n<li>\n<p>Docker-compose是一个用来定义和运行复杂应用的 Docker 工具。使用 docker-compose 后不再需要使用 shell 脚本来逐一创建和启动容器，还可以通过 docker-compose.yml 文件构建和管理复杂多容器组合。</p>\n</li>\n<li>\n<p>Docker-compose的下载和安装很简单，网上有很多教程，我就不再详述了。这里只记录下ubuntu系统下docker-compose的安装过程。</p>\n</li>\n</ul>","readingTime":{"minutes":9.98,"words":2994},"title":"(转)Docker完美部署Django Uwsgi+Nginx+MySQL+Redis","icon":"pen-to-square","type":"article"} }],
  ["/article/code/django-celery%EF%BC%88djcelery%EF%BC%89%E4%BD%BF%E7%94%A8.html", { loader: () => import(/* webpackChunkName: "article_code_django-celery（djcelery）使用.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/django-celery（djcelery）使用.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Python","后端","Django"],"excerpt":"\n<ul>\n<li>1 安装(djcelery)：\n<ul>\n<li>pip install django-celery</li>\n</ul>\n</li>\n<li>2.配置：\n<ul>\n<li><code>CELERYBEAT_SCHEDULER、BROKER_URL、CELERY_RESULT_BACKEND</code>也可以设置MQ，或者直接不写使用默认的mysql数据库，使用mysql后迁移数据库就可在数据库看到关于djcelery的表。</li>\n<li>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>import djcelery</span></span>\n<span class=\"line\"><span>INSTALLED_APPS = [</span></span>\n<span class=\"line\"><span>    .....,</span></span>\n<span class=\"line\"><span>  'djcelery',</span></span>\n<span class=\"line\"><span>    .....</span></span>\n<span class=\"line\"><span>  ]   </span></span>\n<span class=\"line\"><span>  djcelery.setup_loader()</span></span>\n<span class=\"line\"><span>  BROKER_URL = 'redis://127.0.0.1:6379/4'  # 使用redid做broker，消息代理、队列</span></span>\n<span class=\"line\"><span>  CELERYBEAT_SCHEDULER = 'redis://127.0.0.1:6379/5'  # 这是使用了django-celery默认的数据库调度模型,任务执行周期都被存在你指定的orm数据库中</span></span>\n<span class=\"line\"><span>  CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/6'  # 需要跟踪任务的状态时保存结果和状态，结果存储</span></span>\n<span class=\"line\"><span>  CELERY_TIMEZONE = 'Asia/Shanghai'  # 默认上海时区</span></span>\n<span class=\"line\"><span>  CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']</span></span>\n<span class=\"line\"><span>  CELERY_TASK_SERIALIZER = 'json'</span></span>\n<span class=\"line\"><span>  CELERY_RESULT_SERIALIZER = 'json'</span></span>\n<span class=\"line\"><span>  CELERY_IMPORTS = (\"app.tasks\",) #注册tasks，app名字点tasks， 要不然智障系统找不到。</span></span>\n<span class=\"line\"><span>  CELERYD_TASK_TIME_LIMIT = 20  #（celery任务最长执行时间，超时kill）</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>3.迁移数据库：\n<ul>\n<li><code>python manage.py migrate</code></li>\n<li><code>python manage.py makemigrations</code></li>\n</ul>\n</li>\n<li>4.在随便app下创建tasks.py文件：\n<ul>\n<li>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> celery.task</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> import</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> task</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">@task</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">def</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> asdasdasd</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">q,w</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> q</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> +</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> w</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>5.在view中调用：\n<ul>\n<li>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> app.tasks</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> import</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> asdasdasd</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> TestView</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">View</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    def</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">self,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> request</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        a</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        b</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        asdasdasd.delay(a,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> JsonResponse</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({code:200})</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>6.启动项目：\n<ul>\n<li><code>python manage runserver 8000</code>(测试环境下启动)</li>\n<li><code>python manage.py celery worker --loglevel=info</code></li>\n</ul>\n</li>\n<li>7.访问TestView类的接口就可以看到异步成功执行了</li>\n</ul>","readingTime":{"minutes":1.07,"words":320},"title":"django-celery","icon":"pen-to-square","type":"article"} }],
  ["/article/code/django%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E8%A1%A8.html", { loader: () => import(/* webpackChunkName: "article_code_django动态生成表.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/django动态生成表.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Python","后端","Django"],"excerpt":"\n<hr>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>from django.db import models</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># name是表名，fields是字段，app_label是你的应用名(如：flow)，module是应用下的模型（如:flow.models）,options是元类选项</span></span>\n<span class=\"line\"><span>def create_model1(name, fields=None, app_label='', module='', options=None):</span></span>\n<span class=\"line\"><span>    class Meta:  # 模型类的Meta类</span></span>\n<span class=\"line\"><span>        pass</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    if app_label:  # 必须在元类中设置app_label，相关属性可参考https://www.cnblogs.com/lcchuguo/p/4754485.html</span></span>\n<span class=\"line\"><span>        setattr(Meta, 'app_label', app_label)  # 更新元类的选项</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    if options is not None:</span></span>\n<span class=\"line\"><span>        for key, value in options.items():</span></span>\n<span class=\"line\"><span>            setattr(Meta, key, value)  # 设置模型的属性</span></span>\n<span class=\"line\"><span>        attrs = {'__module__': module, 'Meta': Meta}  # 添加字段属性</span></span>\n<span class=\"line\"><span>    if fields:</span></span>\n<span class=\"line\"><span>        attrs.update(fields)  # 创建模型类对象</span></span>\n<span class=\"line\"><span>    return type(name, (models.Model,), attrs)</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>def install(custom_model):</span></span>\n<span class=\"line\"><span>    from django.db import connection</span></span>\n<span class=\"line\"><span>    from django.db.backends.base.schema import BaseDatabaseSchemaEditor</span></span>\n<span class=\"line\"><span>    editor = BaseDatabaseSchemaEditor(connection)</span></span>\n<span class=\"line\"><span>    try:</span></span>\n<span class=\"line\"><span>        editor.create_model(model=custom_model)  # 会抛出个异常，不知为啥,但表会创建</span></span>\n<span class=\"line\"><span>    except AttributeError as aerror:</span></span>\n<span class=\"line\"><span>        print(aerror)</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>def CreateNewTab(tabdate):</span></span>\n<span class=\"line\"><span>    fields = {</span></span>\n<span class=\"line\"><span>        \"name\": models.CharField(max_length=30),</span></span>\n<span class=\"line\"><span>        '__str__': lambda self: '%s' % (</span></span>\n<span class=\"line\"><span>            self.name,</span></span>\n<span class=\"line\"><span>        ), }</span></span>\n<span class=\"line\"><span>    options = {'ordering': [</span></span>\n<span class=\"line\"><span>        \"name\",</span></span>\n<span class=\"line\"><span>    ], 'verbose_name': 'valued customer', }</span></span>\n<span class=\"line\"><span>    custom_model = create_model1(name=tabdate, fields=fields, options=options, app_label='fr__',</span></span>\n<span class=\"line\"><span>                                 module='flow.models')</span></span>\n<span class=\"line\"><span>    try:</span></span>\n<span class=\"line\"><span>        custom_model.objects.get(id=1)</span></span>\n<span class=\"line\"><span>    except:</span></span>\n<span class=\"line\"><span>        try:</span></span>\n<span class=\"line\"><span>            install(custom_model)  # 同步到数据库中</span></span>\n<span class=\"line\"><span>        except:</span></span>\n<span class=\"line\"><span>            pass</span></span>\n<span class=\"line\"><span>    return custom_model</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":0.82,"words":245},"title":"django动态生成表","icon":"pen-to-square","type":"article"} }],
  ["/article/code/Django%E6%97%A5%E5%BF%97.html", { loader: () => import(/* webpackChunkName: "article_code_Django日志.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/Django日志.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Python","后端","Django"],"excerpt":"\n<hr>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>cur_path = os.path.dirname(os.path.realpath(__file__))  # log_path是存放日志的路径</span></span>\n<span class=\"line\"><span>log_path = os.path.join(os.path.dirname(cur_path), 'log')</span></span>\n<span class=\"line\"><span>if not os.path.exists(log_path): os.mkdir(log_path)  # 如果不存在这个logs文件夹，就自动创建一个</span></span>\n<span class=\"line\"><span>LOGGING = {</span></span>\n<span class=\"line\"><span>    'version': 1,</span></span>\n<span class=\"line\"><span>    'disable_existing_loggers': True,</span></span>\n<span class=\"line\"><span>    'formatters': {</span></span>\n<span class=\"line\"><span>        # 日志格式</span></span>\n<span class=\"line\"><span>        'standard': {</span></span>\n<span class=\"line\"><span>            'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '</span></span>\n<span class=\"line\"><span>                      '[%(levelname)s]- %(message)s'},</span></span>\n<span class=\"line\"><span>        'simple': {  # 简单格式</span></span>\n<span class=\"line\"><span>            'format': '%(levelname)s %(message)s'</span></span>\n<span class=\"line\"><span>        },</span></span>\n<span class=\"line\"><span>    },</span></span>\n<span class=\"line\"><span>    # 过滤</span></span>\n<span class=\"line\"><span>    'filters': {</span></span>\n<span class=\"line\"><span>    },</span></span>\n<span class=\"line\"><span>    # 定义具体处理日志的方式</span></span>\n<span class=\"line\"><span>    'handlers': {</span></span>\n<span class=\"line\"><span>        'file': {</span></span>\n<span class=\"line\"><span>            'level': 'INFO',</span></span>\n<span class=\"line\"><span>            # 'class': 'logging.FileHandler',</span></span>\n<span class=\"line\"><span>            'filename': os.path.dirname(os.path.dirname(os.path.realpath(__file__))) + '/log/log.txt',</span></span>\n<span class=\"line\"><span>            'class': 'logging.handlers.RotatingFileHandler',</span></span>\n<span class=\"line\"><span>            'maxBytes': 1024 * 1024 * 300,</span></span>\n<span class=\"line\"><span>            'backupCount': 2,</span></span>\n<span class=\"line\"><span>            'formatter': 'standard',</span></span>\n<span class=\"line\"><span>            'encoding': 'utf-8',  # 设置默认编码</span></span>\n<span class=\"line\"><span>        },</span></span>\n<span class=\"line\"><span>    },</span></span>\n<span class=\"line\"><span>    # 配置用哪几种 handlers 来处理日志</span></span>\n<span class=\"line\"><span>    'loggers': {</span></span>\n<span class=\"line\"><span>        # 类型 为 django 处理所有类型的日志， 默认调用</span></span>\n<span class=\"line\"><span>        'log_info': {</span></span>\n<span class=\"line\"><span>            'handlers': ['file'],</span></span>\n<span class=\"line\"><span>            'level': 'INFO',</span></span>\n<span class=\"line\"><span>            'propagate': True</span></span>\n<span class=\"line\"><span>        },</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>import logging</span></span>\n<span class=\"line\"><span>logger = logging.getLogger('log_info')</span></span>\n<span class=\"line\"><span># logger.info('uuid:{}---&gt;adid:{}--&gt;行数:{}---&gt;错误:{}'.format(uuid_id, device_id,72,e))</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":0.65,"words":196},"title":"Django日志","icon":"pen-to-square","type":"article"} }],
  ["/article/code/leetcode%E5%8D%95%E8%B0%83%E6%A0%88.html", { loader: () => import(/* webpackChunkName: "article_code_leetcode单调栈.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/leetcode单调栈.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["刷题"],"tag":["LeetCode","Python","算法"],"excerpt":"\n<hr>\n<p><em>ps : <code>有错误还请指教</code></em></p>\n<h3>定义：</h3>\n<p>1、单调栈，顾名思义，是栈内元素保持一定单调性（单调递增或单调递减）的栈。这里的单调递增或递减是指的从栈顶到栈底单调递增或递减。既然是栈，就满足后进先出的特点。与之相对应的是单调队列。</p>\n<p>2、从名字上就听的出来，单调栈中存放的数据应该是有序的，所以单调栈也分为单调递增栈和单调递减栈</p>\n<ul>\n<li>单调递增栈：栈内数据序列为单调递增序列</li>\n<li>单调递减栈：栈内数据序列为单调递减序列</li>\n</ul>\n<p>3、结论：利用单调栈，可以找到从左/右遍历第一个比它小/大的元素的位置</p>","readingTime":{"minutes":3.84,"words":1152},"title":"单调栈","icon":"pen-to-square","type":"article"} }],
  ["/article/code/markdown.html", { loader: () => import(/* webpackChunkName: "article_code_markdown.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/markdown.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Markdown"],"excerpt":"\n<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n","readingTime":{"minutes":3.46,"words":1038},"title":"Markdown","icon":"pen-to-square","type":"article"} }],
  ["/article/code/Nginx%E9%85%8D%E7%BD%AEpython%E9%A1%B9%E7%9B%AE(uwsgi_gunicore).html", { loader: () => import(/* webpackChunkName: "article_code_Nginx配置python项目(uwsgi_gunicore).html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/Nginx配置python项目(uwsgi_gunicore).html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Python","后端","Django"],"excerpt":"\n<h2>项目初始化：</h2>\n<p>gunicorn -c <a href=\"http://gunicorn.py\" target=\"_blank\" rel=\"noopener noreferrer\">gunicorn.py</a> my_dhblog.wsgi:application</p>\n<ul>\n<li>pipenv shell 进入pipenv虚拟环境</li>\n<li>pipenv sync 安装依赖</li>\n<li>python <a href=\"http://manage.py\" target=\"_blank\" rel=\"noopener noreferrer\">manage.py</a> makemigrations 数据库迁移</li>\n<li>python <a href=\"http://manage.py\" target=\"_blank\" rel=\"noopener noreferrer\">manage.py</a> migrate 数据库迁移2</li>\n</ul>","readingTime":{"minutes":1.86,"words":559},"title":"Django项目部署","icon":"pen-to-square","type":"article"} }],
  ["/article/code/page.html", { loader: () => import(/* webpackChunkName: "article_code_page.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/page.html.js"), meta: {"author":"Ms.Hope","date":1577836800000,"localizedDate":"2020年1月1日","category":["使用指南"],"tag":["页面配置","使用指南"],"sticky":true,"cover":"/assets/images/cover1.jpg","excerpt":"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n","readingTime":{"minutes":1.73,"words":520},"title":"页面配置","icon":"file","order":3,"type":"article"} }],
  ["/article/code/privacyAndRegulationBlockchain.html", { loader: () => import(/* webpackChunkName: "article_code_privacyAndRegulationBlockchain.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/privacyAndRegulationBlockchain.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["数字货币"],"excerpt":"\n<h3>摘要：</h3>\n<ul>\n<li>Bitcoin提供的假名并不是完全的匿名。通过分析交易信息可以破坏Bitcoin所谓的匿名。这篇文章分析了比特币的隐私问题，调查了现有的加强了隐私的加密货币。并且提出两种可能的解决方案来平衡加密货币的隐私和管制：一种基于去中心化的群签名，另一种基于可验证加密。</li>\n</ul>\n<h3>介绍：</h3>\n<ul>\n<li>提到了可以通过跟踪交易信息和与假名相关的IP地址来得到用户的信息。</li>\n</ul>\n<h3>正文：</h3>\n<ul>\n<li>\n<p>首先把加密货币中的隐私分为三类：付款方的隐私，收款人的隐私，交易金额的隐私。现有的加强Bitcoin隐私的方法分为两类：1. 在Bitcoin上加一层保护隐私机制； 2. 基于Bitcoin开发山寨币。</p>\n</li>\n<li>\n<p>一些保护隐私机制：</p>\n<ol>\n<li>一次性账户：削弱可连接性，通过为每个交易生成一些新的账户来保护付款方的隐私。从已知的种子生成秘钥，并且秘钥存储在一个树结构中。父秘钥可以生成子秘钥，对于不知道种子的用户，就不知道这些秘钥之间的关系。同时还有一种隐藏地址技术：允许付款方为收款人生成一次性的地址来保护收款人的隐私，CryptoNote利用了隐藏地址技术，当执行交易时，付款方根据收款人的公钥生成一个新的一次性地址，只有收款人的私钥可以恢复这个一次性地址的私钥，并且从中得到转账。</li>\n<li>中心化的混淆：引入一个可信的第三方，来将用户的转账和其他用户的转账混合在一起，然后转给一个新的账户，再转给用户要转账的收款方。有中心化问题。</li>\n<li>去中心的混淆：Coinjoin，兼容Bitcoin，可以模糊付款方和收款人的关系（不能确切的知道哪个用户转给了哪个收款方），但现实中很难找到同时转账的用户进行mix。</li>\n<li>隐藏交易金额：2017，基于背包混合的任意值CoinJoin交易。提出一种新的输出分割算法，，允许Coinjoin的交易有任意值。ValueShuffle协议，整合了隐藏地址技术和基于Coinjoin的隐藏交易金额的技术。</li>\n</ol>\n</li>\n<li>\n<p>专注隐私的竞争币：</p>\n<ol>\n<li>Dash：基于比特币，使用扩展版的Coinjoin机制，至少三个参与者，混淆机制。</li>\n<li>Zerocoin：将其他币（如比特币）兑换成Zerocoin，选择一个唯一的序列号和随机数生成一份commitment，花费Zerocoin时采用零知识证明方法打开commitment。只能保障付款方的隐私。</li>\n<li>Zerocash：嵌套commitment，隐藏公钥和交易金额。使用了同态加密和zk-SNARKs，生成证明开销非常大。</li>\n<li>Monero：基于RingCT协议，使用了CryptoNote协议，使用可连接的环签名保护付款方的隐私，使用了Pedersen commitment保护交易金额的隐私。</li>\n<li>PIVX：基于Bitcoin，使用Masternode（这个暂时还没了解）加强交易金额的隐私，为了保护用户的隐私，使用zPIV（zerocoinPIV协议）执行交易。</li>\n<li>Verge：使用多重匿名通信机制保护用户的IP地址，Onion Routing和I2P。</li>\n</ol>\n</li>\n<li>\n<p>现有的加密货币的追踪机制：</p>\n</li>\n<li>\n<p>主要分为三个类型：</p>\n<ol>\n<li>基于交易分析：通过地址的重复使用和共同使用的多个地址，可以推断多个地址属于一个拥有者甚至可以基于一些额外信息将地址映射到真实世界的实体。对于Bitcoin的追踪，常用聚类算法，图论和数据分析。目前这些分析都需要大量数据的输入来分析账户之间的关系，对于单个用户如何追踪没有解决。</li>\n<li>基于中央团体：2016，RSCoin，引入了中央银行的概念，中央银行掌控货币供应。2017，CCS，Solidus，几个银行管理所有用户的账户和交易，只有银行可以追溯所辖用户，但是这两个币都是部分分布的，由中心化风险。UVcoin，矿工是被授权采集交易信息的，而不是PoW，会对错误行为负责。有授权，需要中心化，中心化不应引入区块链。</li>\n<li>基于密码学工具：Garman提出了一个针对DAP协议的可靠隐私机制。允许可选择的对用户和货币进行追踪。追踪货币需要的信息都被一个对称密钥加密，并且这个秘钥被追踪的授权机制进行加密。</li>\n</ol>\n</li>\n<li>\n<p>提出的解决方案：</p>\n<ul>\n<li>利用可验证加密（？？？），并将追踪主管设置为交易中的被动实体。基本思想是，追踪主管有他自己的公私钥，都是独立生成的，当一个用户产生了新的交易时，追踪主管就用私钥加密用户的隐私信息，矿工利用可验证加密技术来确认交易是否正确，当出现了一些有恶意行为的用户时，追踪主管就用其私钥解密该用户的隐私信息来进行追踪。</li>\n</ul>\n</li>\n</ul>","readingTime":{"minutes":5.8,"words":1741},"title":"Privacy And Regulation Blockchain","icon":"pen-to-square","type":"article"} }],
  ["/article/code/python-signal.html", { loader: () => import(/* webpackChunkName: "article_code_python-signal.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/python-signal.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Python"],"excerpt":"\n<hr>\n<h3>signal(自带)</h3>\n<p><strong>注意:在wnidows系统中只能调用 SIGABRT, SIGFPE, SIGILL, SIGINT, SIGSEGV, or SIGTERM</strong></p>\n<ul>\n<li>\n<p>核心代码：</p>\n<ul>\n<li>监听信号\n<ul>\n<li><code>signal.signal(需要捕获的信号，捕获后执行的方法)</code></li>\n</ul>\n</li>\n<li>暂停进程，等待信号\n<ul>\n<li><code>signal.pause()</code></li>\n</ul>\n</li>\n<li>主动发送信号(延迟5S)\n<ul>\n<li><code>signal.alarm(5)</code></li>\n<li><code>os.kill(os.getpid(), 信号)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>监听、接收配置的信号，执行指定的处理方式</p>\n<ul>\n<li>处理方式：\n<ul>\n<li>指定处理函数</li>\n<li>忽略</li>\n<li>根据系统默认值处理, 大部分信号的默认处理是终止进程</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>规则信号</p>\n</li>\n</ul>","readingTime":{"minutes":2.01,"words":602},"title":"PYTHON-signal(线程)","icon":"pen-to-square","type":"article"} }],
  ["/article/code/python%E6%93%8D%E4%BD%9C.html", { loader: () => import(/* webpackChunkName: "article_code_python操作.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/python操作.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Python","基础"],"excerpt":"\n<hr>\n<h2>字典（dict）：</h2>\n<h3>创建：</h3>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span># 1、创建空字典</span></span>\n<span class=\"line\"><span>a = {}</span></span>\n<span class=\"line\"><span>b = dict()</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 2、有初始值</span></span>\n<span class=\"line\"><span>a = {'a': 1, 'b': 2, 'c': 3}</span></span>\n<span class=\"line\"><span>b = dict(a=1, b=2, c=3)</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 3、key 来自一个列表，而 value 相同, 使用 fromkeys</span></span>\n<span class=\"line\"><span>keys = ['a', 'b', 'c']</span></span>\n<span class=\"line\"><span>value = 100</span></span>\n<span class=\"line\"><span>d = dict.fromkeys(keys, value)</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 4、key 来自一个列表，而 value 也是一个列表，使用 zip</span></span>\n<span class=\"line\"><span>keys = ['a', 'b', 'c']</span></span>\n<span class=\"line\"><span>values = [1, 2, 3]</span></span>\n<span class=\"line\"><span>d = dict(zip(keys, values))</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":2.86,"words":857},"title":"Python操作技巧","icon":"pen-to-square","type":"article"} }],
  ["/article/code/vue%E5%9F%BA%E7%A1%80.html", { loader: () => import(/* webpackChunkName: "article_code_vue基础.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/vue基础.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Vue","前端"],"excerpt":"\n<h2>项目初始化：</h2>\n<ul>\n<li>安装<code>node</code>与<code>npm</code>或者<code>cnpm</code>\n<ul>\n<li><code>cnpm</code>:<code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></li>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener noreferrer\">官方下载：<code>node</code></a></li>\n</ul>\n</li>\n<li>全局安装<code>vue-cil</code>：<code>cnpm install -g vue-cli </code></li>\n<li>项目初始化:<code>vue init webpack</code>   <strong>ps:会有一堆配置</strong></li>\n<li>初始化项目依赖：<code>cnpm install </code></li>\n<li>启动项目：<code>npm run dev</code> <strong>ps:可以配置编译器启动</strong></li>\n</ul>","readingTime":{"minutes":2.87,"words":860},"title":"Vue项目部署","icon":"pen-to-square","type":"article"} }],
  ["/article/code/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC.html", { loader: () => import(/* webpackChunkName: "article_code_vue组件传值.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/vue组件传值.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Vue","前端"],"excerpt":"\n<h3>store传值</h3>\n<ul>\n<li><code>store</code>是全局保存数据，一般保存一些cookie，权限，用户等信息。</li>\n<li>需要进行注册<code>app.use(pinia)</code></li>\n<li>这个是持久化插件，可以将数据持久保存在本地<code>pinia-plugin-persistedstate</code></li>\n</ul>\n<h3>父组件传子组件</h3>\n<ul>\n<li>\n<p>暴露子组件函数，父组件调用</p>\n<ul>\n<li>\n<p>子组件暴露函数</p>\n<ul>\n<li>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>const show = (item={})=&gt;{} //item是参数{}是类型</span></span>\n<span class=\"line\"><span>defineExpose({show})</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p>父组件调用</p>\n<ul>\n<li>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>导入： import UserDialog from './userDialog.vue'</span></span>\n<span class=\"line\"><span>注册：  components: {UserDialog}</span></span>\n<span class=\"line\"><span>使用： &lt;UserDialog @custClick=\"reGetTable\" ref=\"userDialog\"/&gt;--(html)</span></span>\n<span class=\"line\"><span>传值： this.$refs.userDialog.show(row)----(js)</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>通过props传值</p>\n<ul>\n<li>\n<p>父组件</p>\n<ul>\n<li>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>&lt;UserDialog :myName=\"data\"/&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p>子组件</p>\n<ul>\n<li>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>export default{props: {myName: {type:String,requires: true}}</span></span>\n<span class=\"line\"><span>键名，字符串类型，必填</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","readingTime":{"minutes":0.97,"words":291},"title":"VUE自用组件传值方式","icon":"pen-to-square","type":"article"} }],
  ["/article/code/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%92%AD%E6%94%BE%E5%AD%A6%E4%B9%A0.html", { loader: () => import(/* webpackChunkName: "article_code_多线程播放学习.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/多线程播放学习.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["视频","转载","Python"],"excerpt":"\n<h3>背景</h3>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>背景：目前主流的播放器（potplayer 1、vlc、mpc…）均不支持多线程播放在线视频，但有些链接单线程下载速度很低，不能流畅播放。</span></span>\n<span class=\"line\"><span>以往只能使用多线程下载器（aria2c 1、idm、迅雷…）下载到本地之后，再使用播放器播放。有可能还没下载完，我就没兴趣看了。</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":1.17,"words":350},"title":"多线程视频播放(转)","icon":"pen-to-square","type":"article"} }],
  ["/article/code/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "article_code_字符串长度压缩算法.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/字符串长度压缩算法.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["刷题"],"tag":["LeetCode","Python","算法"],"excerpt":"\n<hr>\n<p>**ps:**根据原地址的py实现</p>\n<p><strong>原地址java实现：</strong><a href=\"https://blog.csdn.net/lcsy000/article/details/108096039\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/lcsy000/article/details/108096039</a></p>\n<h2>原理：</h2>\n<ul>\n<li>准备2个ascii码小于255的字符，将它们变为二进制，第一个字符左偏移8位，然后加入第二字字符形成新字符在变回字符串</li>\n<li>缺点（可自行调整代码，现在是2位一压缩）：\n<ul>\n<li>压缩后的字符串几乎都为“火星文”，这要是存到库了，别人看了还可能以为是脏数据直接给你删掉了 -_-||</li>\n<li>并不是对所有字符都能加密，ascii 码值超过一定值时可能会出错</li>\n</ul>\n</li>\n</ul>","readingTime":{"minutes":1.73,"words":520},"title":"字符串长度压缩算法","icon":"pen-to-square","type":"article"} }],
  ["/article/code/%E5%B9%B6%E6%9F%A5%E9%9B%86.html", { loader: () => import(/* webpackChunkName: "article_code_并查集.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/并查集.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["刷题"],"tag":["LeetCode","Python","算法"],"excerpt":"\n<hr>\n<p><strong>ps : <code>有错误还请指教</code></strong></p>\n<h3>定义(百度的)：</h3>\n<ul>\n<li>并查集，在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。这一类问题近几年来反复出现在信息学的国际国内赛题中，其特点是看似并不复杂，但数据量极大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。</li>\n<li>并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的合并及查询问题。常常在使用中以森林来表示。</li>\n</ul>","readingTime":{"minutes":1.98,"words":594},"title":"并查集","icon":"pen-to-square","type":"article"} }],
  ["/article/code/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80.html", { loader: () => import(/* webpackChunkName: "article_code_康托展开.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/康托展开.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["刷题"],"tag":["LeetCode","Python","算法"],"excerpt":"\n<hr>\n<h3>概述：</h3>\n<ul>\n<li><strong>官方概述：</strong>\n<ul>\n<li>康托展开是一个全排列到一个自然数的双射，常用于构建哈希表时的空间压缩。 康托展开的实质是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。</li>\n</ul>\n</li>\n<li><strong>通俗介绍：</strong>\n<ul>\n<li>康托展开可以求解一个排列的序号，比如：12345 序号为 1  ，12354序号为2，按字典序增加编号递增，依次类推。康托逆展开可以求解一个序号它对应的排列是什么</li>\n</ul>\n</li>\n<li><strong>逆康托展开通俗介绍：</strong>\n<ul>\n<li>就是通过序号求解得到 -&gt; 自然数的全排列（从小到大）的序列</li>\n</ul>\n</li>\n</ul>","readingTime":{"minutes":3.16,"words":949},"title":"康托展开","icon":"pen-to-square","type":"article"} }],
  ["/article/code/%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81navicat.html", { loader: () => import(/* webpackChunkName: "article_code_显示乱码navicat.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/显示乱码navicat.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Nvicat","数据库"],"excerpt":"\n<p><strong>过期后删除home下.nvicat恢复试用期，乱码问题重新配置</strong></p>\n<ul>\n<li>修改启动文件编码格式为zh_CN.UTF-8</li>\n<li>修改软件中“工具-》选项-》常规-》界面字体”Noto Sans Mono CJK TC Regular</li>\n<li>修改软件中“工具-》选项-》常规-》编辑器字体”Noto Sans CJK SC Regular</li>\n<li>修改软件中“表》记录-》网格字体”Noto Sans Mono CJK TC Regular</li>\n<li>还有连接数据库时选”高级-》编码“改为utf-8</li>\n<li>mysq  admin2 admin UserPin</li>\n</ul>","readingTime":{"minutes":0.45,"words":134},"title":"nvicat乱码","icon":"pen-to-square","type":"article"} }],
  ["/article/code/%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8.html", { loader: () => import(/* webpackChunkName: "article_code_查看服务器内存占用.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/查看服务器内存占用.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Linux"],"excerpt":"\n<hr>\n<h3>查看所有mysql数据库内存占用：</h3>\n<pre><code>select \nTABLE_SCHEMA, \nconcat(truncate(sum(data_length)/1024/1024,2),' MB') as data_size,\nconcat(truncate(sum(index_length)/1024/1024,2),'MB') as index_size\nfrom information_schema.tables\ngroup by TABLE_SCHEMA\nORDER BY data_size desc;\n</code></pre>\n<h3>linux内存查看：</h3>","readingTime":{"minutes":0.88,"words":264},"title":"查看服务器内存占用","icon":"pen-to-square","type":"article"} }],
  ["/article/code/%E8%A7%A3%E5%86%B3vue%E9%A6%96%E6%AC%A1%E5%8A%A0%E8%BD%BD%E7%BC%93%E6%85%A2.html", { loader: () => import(/* webpackChunkName: "article_code_解决vue首次加载缓慢.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/解决vue首次加载缓慢.html.js"), meta: {"date":1742428800000,"localizedDate":"2025年3月20日","category":["技术"],"tag":["Vue","前端"],"excerpt":"\n<h3>一、去掉map文件：</h3>\n<ul>\n<li>map文件是线上调试使用的，增加很多了dist包的大小</li>\n<li>修改vue.config.js文件（没有就自己创建）</li>\n</ul>\n<div class=\"language-nashorn line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"nashorn\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>module.exports = {</span></span>\n<span class=\"line\"><span>  productionSourceMap: false, #取消map文件</span></span>\n<span class=\"line\"><span>  configureWebpack: config =&gt; {  # 增加markdown的支持</span></span>\n<span class=\"line\"><span>    config.module.rules.push({</span></span>\n<span class=\"line\"><span>      // 处理markdown文件</span></span>\n<span class=\"line\"><span>      test: /\\.md$/,</span></span>\n<span class=\"line\"><span>      use: [</span></span>\n<span class=\"line\"><span>        {</span></span>\n<span class=\"line\"><span>          loader: 'markdown-loader'</span></span>\n<span class=\"line\"><span>        },</span></span>\n<span class=\"line\"><span>        {</span></span>\n<span class=\"line\"><span>          loader: 'vue-loader'</span></span>\n<span class=\"line\"><span>        },</span></span>\n<span class=\"line\"><span>        {</span></span>\n<span class=\"line\"><span>          loader: 'html-loader'</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>      ]</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>    )</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":1.27,"words":380},"title":"Vue项目压缩","icon":"pen-to-square","type":"article"} }],
  ["/404.html", { loader: () => import(/* webpackChunkName: "404.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/404.html.js"), meta: {"title":""} }],
  ["/article/code/", { loader: () => import(/* webpackChunkName: "article_code_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/code/index.html.js"), meta: {"title":"Code"} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "article_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/index.html.js"), meta: {"title":"文章","index":false} }],
  ["/category/", { loader: () => import(/* webpackChunkName: "category_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/category/index.html.js"), meta: {"title":"分类","index":false} }],
  ["/category/%E6%8A%80%E6%9C%AF/", { loader: () => import(/* webpackChunkName: "category_技术_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/category/技术/index.html.js"), meta: {"title":"技术 分类","index":false} }],
  ["/category/%E5%88%B7%E9%A2%98/", { loader: () => import(/* webpackChunkName: "category_刷题_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/category/刷题/index.html.js"), meta: {"title":"刷题 分类","index":false} }],
  ["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/", { loader: () => import(/* webpackChunkName: "category_使用指南_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/category/使用指南/index.html.js"), meta: {"title":"使用指南 分类","index":false} }],
  ["/tag/", { loader: () => import(/* webpackChunkName: "tag_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/index.html.js"), meta: {"title":"标签","index":false} }],
  ["/tag/%E8%BD%AC%E8%BD%BD/", { loader: () => import(/* webpackChunkName: "tag_转载_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/转载/index.html.js"), meta: {"title":"标签: 转载","index":false} }],
  ["/tag/python/", { loader: () => import(/* webpackChunkName: "tag_python_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/python/index.html.js"), meta: {"title":"标签: Python","index":false} }],
  ["/tag/%E5%90%8E%E7%AB%AF/", { loader: () => import(/* webpackChunkName: "tag_后端_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/后端/index.html.js"), meta: {"title":"标签: 后端","index":false} }],
  ["/tag/django/", { loader: () => import(/* webpackChunkName: "tag_django_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/django/index.html.js"), meta: {"title":"标签: Django","index":false} }],
  ["/tag/leetcode/", { loader: () => import(/* webpackChunkName: "tag_leetcode_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/leetcode/index.html.js"), meta: {"title":"标签: LeetCode","index":false} }],
  ["/tag/%E7%AE%97%E6%B3%95/", { loader: () => import(/* webpackChunkName: "tag_算法_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/算法/index.html.js"), meta: {"title":"标签: 算法","index":false} }],
  ["/tag/markdown/", { loader: () => import(/* webpackChunkName: "tag_markdown_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/markdown/index.html.js"), meta: {"title":"标签: Markdown","index":false} }],
  ["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/", { loader: () => import(/* webpackChunkName: "tag_页面配置_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/页面配置/index.html.js"), meta: {"title":"标签: 页面配置","index":false} }],
  ["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/", { loader: () => import(/* webpackChunkName: "tag_使用指南_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/使用指南/index.html.js"), meta: {"title":"标签: 使用指南","index":false} }],
  ["/tag/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81/", { loader: () => import(/* webpackChunkName: "tag_数字货币_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/数字货币/index.html.js"), meta: {"title":"标签: 数字货币","index":false} }],
  ["/tag/%E5%9F%BA%E7%A1%80/", { loader: () => import(/* webpackChunkName: "tag_基础_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/基础/index.html.js"), meta: {"title":"标签: 基础","index":false} }],
  ["/tag/vue/", { loader: () => import(/* webpackChunkName: "tag_vue_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/vue/index.html.js"), meta: {"title":"标签: Vue","index":false} }],
  ["/tag/%E5%89%8D%E7%AB%AF/", { loader: () => import(/* webpackChunkName: "tag_前端_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/前端/index.html.js"), meta: {"title":"标签: 前端","index":false} }],
  ["/tag/%E8%A7%86%E9%A2%91/", { loader: () => import(/* webpackChunkName: "tag_视频_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/视频/index.html.js"), meta: {"title":"标签: 视频","index":false} }],
  ["/tag/nvicat/", { loader: () => import(/* webpackChunkName: "tag_nvicat_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/nvicat/index.html.js"), meta: {"title":"标签: Nvicat","index":false} }],
  ["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/", { loader: () => import(/* webpackChunkName: "tag_数据库_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/数据库/index.html.js"), meta: {"title":"标签: 数据库","index":false} }],
  ["/tag/linux/", { loader: () => import(/* webpackChunkName: "tag_linux_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/tag/linux/index.html.js"), meta: {"title":"标签: Linux","index":false} }],
  ["/star/", { loader: () => import(/* webpackChunkName: "star_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/star/index.html.js"), meta: {"title":"星标","index":false} }],
  ["/timeline/", { loader: () => import(/* webpackChunkName: "timeline_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/timeline/index.html.js"), meta: {"title":"时间轴","index":false} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "article_index.html" */"D:/T_c/blog_chione/blog_chione/src/.vuepress/.temp/pages/article/index.html.js"), meta: {"title":"文章","index":false} }],
]);

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updateRoutes) {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
  }
  if (__VUE_HMR_RUNTIME__.updateRedirects) {
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ routes, redirects }) => {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  })
}
